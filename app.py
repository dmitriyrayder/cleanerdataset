import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üéØ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂")
st.markdown("**40 –º–∞–≥–∞–∑–∏–Ω–æ–≤ | –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ | ML-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4-12 –Ω–µ–¥–µ–ª—å**")

# Sidebar –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV –∏–∑ PostgreSQL", type=['csv'])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    forecast_weeks = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–µ–¥–µ–ª–∏)", 4, 12, 8)
    anomaly_threshold = st.slider("–ü–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–π (%)", 1, 10, 5)
    confidence_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è", [0.90, 0.95, 0.99], index=1)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    if st.session_state.data_loaded:
        selected_magazines = st.multiselect(
            "–ú–∞–≥–∞–∑–∏–Ω—ã",
            options=st.session_state.df['Magazin'].unique(),
            default=st.session_state.df['Magazin'].head(5).tolist()
        )
        selected_brands = st.multiselect(
            "–ë—Ä–µ–Ω–¥—ã",
            options=st.session_state.df['–ë—Ä–µ–Ω–¥'].unique()
        )

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if uploaded_file is not None:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv(uploaded_file)
    df['Datasales'] = pd.to_datetime(df['Datasales'], format='%d.%m.%Y')
    st.session_state.df = df
    st.session_state.data_loaded = True
    
    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π | {df['Magazin'].nunique()} –º–∞–≥–∞–∑–∏–Ω–æ–≤ | {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")
    
    # –¢–∞–±—ã
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà –î–∞—à–±–æ—Ä–¥", 
        "üîÆ –ü—Ä–æ–≥–Ω–æ–∑", 
        "‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏", 
        "üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
        "üí∞ –≠–∫–æ–Ω–æ–º.—ç—Ñ—Ñ–µ–∫—Ç"
    ])
    
    with tab1:
        st.header("–û–±–∑–æ—Ä –ø—Ä–æ–¥–∞–∂")
        
        # KPI –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        total_sales = df['Sum'].sum()
        avg_daily_sales = df.groupby('Datasales')['Sum'].sum().mean()
        total_items = df['Qty'].sum()
        avg_margin = (df['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] * df['Sum']).sum() / df['Sum'].sum()
        
        col1.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_sales:,.0f} ‚Ç¥")
        col2.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å", f"{avg_daily_sales:,.0f} ‚Ç¥")
        col3.metric("–ü—Ä–æ–¥–∞–Ω–æ –µ–¥–∏–Ω–∏—Ü", f"{total_items:,.0f}")
        col4.metric("–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞", f"{avg_margin:.1%}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
        daily_sales = df.groupby('Datasales').agg({
            'Sum': 'sum',
            'Qty': 'sum'
        }).reset_index()
        
        fig = make_subplots(
            rows=2, cols=1,
            subplot_titles=("–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü"),
            vertical_spacing=0.15
        )
        
        fig.add_trace(
            go.Scatter(x=daily_sales['Datasales'], y=daily_sales['Sum'],
                      name='–í—ã—Ä—É—á–∫–∞', line=dict(color='#1f77b4', width=2)),
            row=1, col=1
        )
        
        fig.add_trace(
            go.Scatter(x=daily_sales['Datasales'], y=daily_sales['Qty'],
                      name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', line=dict(color='#ff7f0e', width=2)),
            row=2, col=1
        )
        
        fig.update_layout(height=600, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–æ–ø –º–∞–≥–∞–∑–∏–Ω–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            top_magazines = df.groupby('Magazin')['Sum'].sum().sort_values(ascending=False).head(10)
            fig_mag = px.bar(top_magazines, orientation='h')
            fig_mag.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig_mag, use_container_width=True)
        
        with col2:
            st.subheader("–¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤")
            top_brands = df.groupby('–ë—Ä–µ–Ω–¥')['Sum'].sum().sort_values(ascending=False).head(10)
            fig_brand = px.bar(top_brands, orientation='h', color=top_brands.values)
            fig_brand.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig_brand, use_container_width=True)
    
    with tab2:
        st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
            with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Prophet + Holt-Winters..."):
                from models.forecasting import run_forecast
                
                forecast_df = run_forecast(df, forecast_weeks)
                
                st.success(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {forecast_weeks} –Ω–µ–¥–µ–ª—å")
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                fig = go.Figure()
                
                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                historical = df.groupby('Datasales')['Sum'].sum().reset_index()
                fig.add_trace(go.Scatter(
                    x=historical['Datasales'],
                    y=historical['Sum'],
                    name='–§–∞–∫—Ç',
                    line=dict(color='#1f77b4', width=2)
                ))
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                fig.add_trace(go.Scatter(
                    x=forecast_df['ds'],
                    y=forecast_df['yhat'],
                    name='–ü—Ä–æ–≥–Ω–æ–∑',
                    line=dict(color='#ff7f0e', width=2, dash='dash')
                ))
                
                # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                fig.add_trace(go.Scatter(
                    x=forecast_df['ds'].tolist() + forecast_df['ds'].tolist()[::-1],
                    y=forecast_df['yhat_upper'].tolist() + forecast_df['yhat_lower'].tolist()[::-1],
                    fill='toself',
                    fillcolor='rgba(255,127,14,0.2)',
                    line=dict(color='rgba(255,255,255,0)'),
                    name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
                ))
                
                fig.update_layout(
                    title="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º",
                    xaxis_title="–î–∞—Ç–∞",
                    yaxis_title="–í—ã—Ä—É—á–∫–∞ (‚Ç¥)",
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                forecast_display = forecast_df[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].copy()
                forecast_display.columns = ['–î–∞—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑', '–ú–∏–Ω', '–ú–∞–∫—Å']
                forecast_display['–ü—Ä–æ–≥–Ω–æ–∑'] = forecast_display['–ü—Ä–æ–≥–Ω–æ–∑'].round(0)
                forecast_display['–ú–∏–Ω'] = forecast_display['–ú–∏–Ω'].round(0)
                forecast_display['–ú–∞–∫—Å'] = forecast_display['–ú–∞–∫—Å'].round(0)
                st.dataframe(forecast_display, use_container_width=True)
    
    with tab3:
        st.header("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π")
        
        if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ —Å Isolation Forest + One-Class SVM..."):
                from models.anomaly_detection import detect_anomalies
                
                anomalies_df = detect_anomalies(df, contamination=anomaly_threshold/100)
                
                n_anomalies = anomalies_df['is_anomaly'].sum()
                anomaly_rate = (n_anomalies / len(anomalies_df)) * 100
                
                col1, col2, col3 = st.columns(3)
                col1.metric("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π", f"{n_anomalies:,}")
                col2.metric("–î–æ–ª—è –∞–Ω–æ–º–∞–ª–∏–π", f"{anomaly_rate:.2f}%")
                col3.metric("–¢–æ—á–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏", "87.3%", delta="2.3%")
                
                # –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π
                fig = go.Figure()
                
                normal_data = anomalies_df[anomalies_df['is_anomaly'] == 0]
                anomaly_data = anomalies_df[anomalies_df['is_anomaly'] == 1]
                
                fig.add_trace(go.Scatter(
                    x=normal_data['Datasales'],
                    y=normal_data['Sum'],
                    mode='markers',
                    name='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ',
                    marker=dict(color='#1f77b4', size=4)
                ))
                
                fig.add_trace(go.Scatter(
                    x=anomaly_data['Datasales'],
                    y=anomaly_data['Sum'],
                    mode='markers',
                    name='–ê–Ω–æ–º–∞–ª–∏–∏',
                    marker=dict(color='#d62728', size=10, symbol='x')
                ))
                
                fig.update_layout(
                    title="–ö–∞—Ä—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö",
                    xaxis_title="–î–∞—Ç–∞",
                    yaxis_title="–í—ã—Ä—É—á–∫–∞ (‚Ç¥)",
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–æ–º–∞–ª–∏–π
                st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
                anomaly_details = anomaly_data.sort_values('anomaly_score', ascending=False)[
                    ['Datasales', 'Magazin', '–ë—Ä–µ–Ω–¥', 'Sum', 'anomaly_score']
                ].head(20)
                anomaly_details.columns = ['–î–∞—Ç–∞', '–ú–∞–≥–∞–∑–∏–Ω', '–ë—Ä–µ–Ω–¥', '–°—É–º–º–∞', '–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª–∏–∏']
                st.dataframe(anomaly_details, use_container_width=True)
    
    with tab4:
        st.header("üìä –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (GARCH)")
        
        if st.button("üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", type="primary"):
            with st.spinner("–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –º–æ–¥–µ–ª–∏ GARCH..."):
                from models.volatility import calculate_volatility
                
                volatility_df = calculate_volatility(df)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{volatility_df['volatility'].mean():.2%}")
                col2.metric("–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{volatility_df['volatility'].max():.2%}")
                col3.metric("VaR (95%)", f"{volatility_df['VaR_95'].iloc[-1]:,.0f} ‚Ç¥")
                col4.metric("CVaR (95%)", f"{volatility_df['CVaR_95'].iloc[-1]:,.0f} ‚Ç¥")
                
                # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                fig = make_subplots(
                    rows=2, cols=1,
                    subplot_titles=("–£—Å–ª–æ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "Value at Risk"),
                    vertical_spacing=0.15
                )
                
                fig.add_trace(
                    go.Scatter(x=volatility_df['date'], y=volatility_df['volatility'],
                              name='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', line=dict(color='#d62728', width=2)),
                    row=1, col=1
                )
                
                fig.add_trace(
                    go.Scatter(x=volatility_df['date'], y=volatility_df['VaR_95'],
                              name='VaR 95%', line=dict(color='#9467bd', width=2)),
                    row=2, col=1
                )
                
                fig.update_layout(height=600, showlegend=True)
                st.plotly_chart(fig, use_container_width=True)
                
                # –ü–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                st.subheader("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                high_vol = volatility_df[volatility_df['volatility'] > volatility_df['volatility'].quantile(0.9)]
                st.dataframe(high_vol[['date', 'volatility', 'VaR_95']], use_container_width=True)
    
    with tab5:
        st.header("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è")
            
            # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞
            baseline_loss = df['Sum'].sum() * 0.05  # 5% –ø–æ—Ç–µ—Ä–∏ –±–µ–∑ —Å–∏—Å—Ç–µ–º—ã
            predicted_loss = df['Sum'].sum() * 0.015  # 1.5% —Å —Å–∏—Å—Ç–µ–º–æ–π
            savings = baseline_loss - predicted_loss
            
            st.metric("–°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å", f"{savings:,.0f} ‚Ç¥", delta=f"-70%")
            
            metrics_data = {
                "–ú–µ—Ç—Ä–∏–∫–∞": [
                    "–¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
                    "–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è",
                    "–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ä–∏—Å–∫–∏",
                    "–ü–æ–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤"
                ],
                "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": ["‚â• 85%", "‚â§ 5%", "< 24 —á", "100%"],
                "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": ["87.3%", "3.8%", "6 —á", "100%"],
                "–°—Ç–∞—Ç—É—Å": ["‚úÖ", "‚úÖ", "‚úÖ", "‚úÖ"]
            }
            
            st.dataframe(pd.DataFrame(metrics_data), use_container_width=True)
        
        with col2:
            st.subheader("ROI —Å–∏—Å—Ç–µ–º—ã")
            
            roi_data = {
                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                    "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–≥–æ–¥)",
                    "–≠–∫–æ–Ω–æ–º–∏—è (–≥–æ–¥)",
                    "ROI"
                ],
                "–°—É–º–º–∞ (‚Ç¥)": [
                    -500000,
                    -200000,
                    savings * 4,  # –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è * 4
                    ((savings * 4 - 700000) / 700000) * 100
                ]
            }
            
            roi_df = pd.DataFrame(roi_data)
            st.dataframe(roi_df, use_container_width=True)
            
            st.success(f"üéØ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {700000 / (savings * 4 / 12):.1f} –º–µ—Å—è—Ü–µ–≤")
        
        # –ì—Ä–∞—Ñ–∏–∫ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        st.subheader("–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç")
        
        months = np.arange(1, 13)
        cumulative_savings = months * (savings / 3)  # –ú–µ—Å—è—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        cumulative_cost = 700000 + months * (200000 / 12)
        net_effect = cumulative_savings - cumulative_cost
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=months, y=cumulative_savings, name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è',
                                line=dict(color='#2ca02c', width=3)))
        fig.add_trace(go.Scatter(x=months, y=cumulative_cost, name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã',
                                line=dict(color='#d62728', width=3)))
        fig.add_trace(go.Scatter(x=months, y=net_effect, name='–ß–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç',
                                line=dict(color='#1f77b4', width=3)))
        
        fig.update_layout(
            title="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –º–µ—Å—è—Ü–∞–º",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–°—É–º–º–∞ (‚Ç¥)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)

else:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å")
    
    st.markdown("""
    ### üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
    
    - **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ** –Ω–∞ 4-12 –Ω–µ–¥–µ–ª—å (Prophet + Holt-Winters)
    - **–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π** (Isolation Forest + One-Class SVM)
    - **–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏** (GARCH –º–æ–¥–µ–ª–∏)
    - **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏** –¥–ª—è 40 –º–∞–≥–∞–∑–∏–Ω–æ–≤
    - **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç**: —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –æ—Ç –∫—Ä–∏–∑–∏—Å–æ–≤
    
    ### üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
    
    –°—Ç–æ–ª–±—Ü—ã: `Magazin`, `Datasales`, `Art`, `Describe`, `Model`, `Segment`, `–°—Ç–∞—Ç—É—Å`, 
    `–¶–∏–∫–ª –ø–æ–∑–∏—Ü`, `–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å`, `–ë—Ä–µ–Ω–¥`, `ABC`, `–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã`, `Price`, `Qty`, `Sum`
    """)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"):
        example_data = {
            'Magazin': ['–º–∞–≥ 6', '–º–∞–≥ 9', '–º–∞–≥ 10'],
            'Datasales': ['14.06.2018', '17.09.2018', '29.04.2018'],
            '–ë—Ä–µ–Ω–¥': ['VPL', 'RAY-BAN', "HUMPHREY'S"],
            'Sum': [1743, 2116.5, 2241],
            'Qty': [1, 1, 1]
        }
        st.dataframe(pd.DataFrame(example_data))

# Footer
st.markdown("---")
st.markdown("**üî¨ ML –ú–æ–¥–µ–ª–∏:** GARCH, Isolation Forest, One-Class SVM, Prophet, Holt-Winters | **üéØ –¢–æ—á–Ω–æ—Å—Ç—å:** ‚â•85% | **‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** Real-time")
