import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode, GridUpdateMode

st.set_page_config(page_title="üìä –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å AgGrid", layout="wide")
st.title("üß† ML + AgGrid: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ===
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    df = pd.read_csv(uploaded_file, parse_dates=["Datasales"])
    st.success("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞: –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    df['calc_sum'] = df['Price'] * df['Qty']
    df['sum_diff'] = np.abs(df['calc_sum'] - df['Sum'])
    df['error_sum'] = df['sum_diff'] > 1e-2

    # --- –ê–Ω–æ–º–∞–ª–∏–∏ ---
    try:
        X_scaled = StandardScaler().fit_transform(df[['Price', 'Qty', 'Sum']])
        iso = IsolationForest(contamination=0.01, random_state=42)
        df['anomaly'] = iso.fit_predict(X_scaled) == -1
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        df['anomaly'] = False

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ ---
    st.subheader("üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫")
    for col in ['Magazin', 'Datasales', 'Describe', 'Model', 'Segment']:
        st.markdown(f"**{col}**: –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî {df[col].isnull().sum()}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ‚Äî {df[col].nunique()}")

    # --- AgGrid: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    st.subheader("üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (AgGrid)")

    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_default_column(editable=True, filter=True, sortable=True, resizable=True)

    # –£—Å–ª–æ–≤–Ω–∞—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫
    cell_style_jscode = JsCode("""
    function(params) {
        if (params.data.error_sum) {
            return { backgroundColor: '#ffe6e6' };
        }
        if (params.data.anomaly) {
            return { backgroundColor: '#ffffcc' };
        }
        return null;
    }
    """)

    for col in ['Price', 'Qty', 'Sum', 'calc_sum', 'sum_diff']:
        gb.configure_column(col, cellStyle=cell_style_jscode)

    gb.configure_column("error_sum", headerName="–û—à–∏–±–∫–∞ —Å—É–º–º—ã", type=["booleanColumn"], editable=False)
    gb.configure_column("anomaly", headerName="–ê–Ω–æ–º–∞–ª–∏—è", type=["booleanColumn"], editable=False)
    gb.configure_grid_options(domLayout='normal', pagination=True)

    grid_options = gb.build()

    grid_response = AgGrid(
        df,
        gridOptions=grid_options,
        height=600,
        width='100%',
        update_mode=GridUpdateMode.VALUE_CHANGED,
        fit_columns_on_grid_load=True,
        allow_unsafe_jscode=True,
        theme="alpine"
    )

    new_df = pd.DataFrame(grid_response['data'])

    # --- –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
    st.subheader("üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç", new_df.to_csv(index=False), file_name="cleaned_data_aggrid.csv")

else:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum")
